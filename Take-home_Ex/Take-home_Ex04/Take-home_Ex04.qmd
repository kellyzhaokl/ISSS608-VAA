---
title: "Take-home_Ex04"
date: "March 10, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

## 1 Overview

Our project is about weather visualization. So in this take-home exercise 4, I will select Rainfall distribution for shiny application and complete the following tasks:

-   To evaluate and determine whether the necessary R packages needed for my Shiny application are supported in R CRAN,

-   To prepare and test the specific R codes can be run and return the correct output as expected,

-   To determine the parameters and outputs that will be exposed on the Shiny applications, and

-   To select the appropriate Shiny UI components for exposing the parameters determined above.

## 2 Data preparation

### 2.1 Loading R packages

```{r}
pacman::p_load(ggplot2,readr,dplyr,lubridate,pheatmap,tmap, tidyverse,sf,viridis,terra,gstat,tmap,tibble)
```

### 2.2 Data Preparation

Firstly, our team download [historical daily data](http://www.weather.gov.sg/climate-historical-daily/) from [Meteorological Service Singapore](http://www.weather.gov.sg/home/) website using python. The raw dataset is from 2014 to 2024.

Then, we select the dataset from 2014 to 2023 and replace "�" value to na, change the column name which could be more easier to read.

```{r}
data <- read_csv("data/weather.csv", na = c("?", "�"))

data <- data %>%
  dplyr::filter(Year >= 2014, Year <= 2023)

colnames(data) <- c(
  'Station', 'Year', 'Month', 'Day', 'DailyRainfall',
  'Highest30minRainfall', 'Highest60minRainfall', 'Highest120minRainfall',
  'MeanTemperature', 'MaxTemperature', 'MinTemperature',
  'MeanWindSpeed', 'MaxWindSpeed'
)

data <- data %>%
  mutate(
    DailyRainfall = as.numeric(DailyRainfall),
    Highest30minRainfall = as.numeric(Highest30minRainfall),
    Highest60minRainfall = as.numeric(Highest60minRainfall),
    Highest120minRainfall = as.numeric(Highest120minRainfall),
    MeanTemperature = as.numeric(MeanTemperature),
    MaxTemperature = as.numeric(MaxTemperature),
    MinTemperature = as.numeric(MinTemperature)
  ) %>%
  
  suppressWarnings()

sum(is.na(data$DailyRainfall))

monthly_rainfall <- data %>%
  group_by(Year, Month) %>%
  summarise(TotalRainfall = sum(DailyRainfall, na.rm = TRUE))

print(monthly_rainfall)

```

## 4 Visualisation

### 4.1 Monthly Rainfall Heatmap By Year

Firstly, I create this heatmap to illustrate the monthly rainfall distribution over a decade, with varying shades of blue representing the amount of rainfall—darker for more rain and lighter for less.

```{r}

monthly_rainfall$Year <- factor(monthly_rainfall$Year)
monthly_rainfall$Month <- factor(monthly_rainfall$Month, 
                                 levels = c(1:12), 
                                 labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

ggplot(monthly_rainfall, aes(x = Month, y = Year, fill = TotalRainfall)) +
  geom_tile(color = "white") + 
  scale_fill_gradient(low = "white", high = "blue") + 
  theme_minimal() + 
  labs(fill = "Total Rainfall (mm)", 
       title = "Monthly Rainfall Heatmap", 
       x = "Month", 
       y = "Year") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

```

### 4.2 Daily Rainfall HeatMap By Month

Analyzing daily rainfall patterns instead could offer a more precise understanding of rainfall trends and extreme weather events, providing valuable insight beyond the broader monthly averages.

```{r}
data_2023 <- data %>% 
  filter(Year == 2023)

ggplot(data_2023, aes(x = factor(Day), y = factor(Month))) +
  geom_tile(aes(fill = DailyRainfall), color = "white") +
  scale_fill_viridis(na.value = "white", name = "Daily Rainfall (mm)") +
  labs(x = "Day", y = "Month", title = "Daily Rainfall by Month and Day") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

### 4.3 Rainfall Distribution In Singapore

Get the rainfall station dataset

```{r}
rfstations1 <- read.csv("data/aspatial/RainfallStation.csv")
```

For example, calculate the average rainfall at each station in 2023

```{r}
rfdata1 <- data_2023 %>%
  group_by(Station) %>%
  summarise(AvgRainfall = mean(DailyRainfall, na.rm = TRUE)) %>%
  ungroup() 

print(rfdata1)
```

Combining rainfall data with station coordinates data

```{r}
rfdata1 <- rfdata1 %>%
  left_join(rfstations1)

rfdata_sf1 <- st_as_sf(rfdata1,
                      coords = c("Longitude",
                                 "Latitude"),
                      crs = 4326) %>%
  st_transform(crs=3414)
```

```{r}
mpsz2019 <-st_read(dsn = "data/geospatial",layer ="MPSZ-2019") %>%
  st_transform(CRS =3414)
```

Plot the average rainfall data by different stations, but as we can see that there is only station plot in this map. We need to take more steps to predict the entire rainfall distribution across Singapore using the station data.

```{r}
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
tm_shape(mpsz2019)+
  tm_borders()+
  tm_shape(rfdata_sf1)+
  tm_dots(col="AvgRainfall")
tmap_mode("plot")
```

This method involves using spatial analysis to predict average rainfall across a geographic area, transforming the results into the same coordinate system as the base map, rasterizing the predicted values to create a grid, and finally visualizing the results with a heatmap using the **`tmap`** package in R.

```{r}
grid <- terra::rast(mpsz2019, nrows = 690, ncols = 1075)
xy <- terra::xyFromCell(grid, 1:ncell(grid))

sf::sf_use_s2(FALSE)

coop <- st_as_sf(as.data.frame(xy),
                 coords = c("x","y"),
                 crs = st_crs(mpsz2019))

coop <- st_filter(coop,mpsz2019)

```

```{r}
res <- gstat(formula = AvgRainfall ~ 1,
             locations = rfdata_sf1,
             nmax = 15,
             set = list(idp = 0))

rfdata_sf_crs1 <- st_crs(rfdata_sf1)

print(rfdata_sf_crs1)

coop <- st_transform(coop, crs = rfdata_sf_crs1)
```

```{r}
resp <- predict(res,coop)
```

Rainfall Distribution In Singapore

```{r}

resp <- st_transform(resp, crs = terra::crs(grid))

resp$x <- st_coordinates(resp)[,1]
resp$y <- st_coordinates(resp)[,2]
resp$pred <- resp$var1.pred

pred <- terra::rasterize(resp, grid, field = "pred", fun = 'mean')

#print(terra::values(pred))

tmap_options(check.and.fix = TRUE)
tmap_mode("plot")
tm_shape(pred) +
  tm_raster(alpha = 0.6, palette = "viridis", n = 6) 
```

## 5 Shiny Storyboard

The storyboard prototype is shown like this:

When selecting year, we could see the rainfall distribution across Singapore and the daily rainfall distribution every year.

![](images/clipboard-2171587909.png)
