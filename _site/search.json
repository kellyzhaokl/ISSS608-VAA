[
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "Despite official claims of educational equity in Singapore, public perception highlights persistent disparities based on socioeconomic status, school type, and family background."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#overview",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "Despite official claims of educational equity in Singapore, public perception highlights persistent disparities based on socioeconomic status, school type, and family background."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objective",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#objective",
    "title": "Take-home_Ex01",
    "section": "2.OBJECTIVE",
    "text": "2.OBJECTIVE\nUsing appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions to get insight.\n\nThe distribution of Singapore students’ performance in mathematics, reading, and science.\nThe relationship between these performances with schools, gender and socioeconomic status of the students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation",
    "title": "Take-home_Ex01",
    "section": "3.DATA PREPARATION",
    "text": "3.DATA PREPARATION\n\n3.1 Loading R packages\n\n\nCode\npacman::p_load(tidyverse,haven,dplyr,tidyr,ggplot2,patchwork,ggthemes)\n\n\n\n\n3.2 Data set\nAs we are focursed on Singapore database. So firstly we should filter Singapore dataset. Refer to In-class Exercise 1 for more details.\n\n\nCode\n# eval: false\nstu_qqq_SG &lt;-\n  read_rds(\"data/stu_qqq_SG.rds\")\n\n\n\n\n3.3 Data Preparation\n\n1.Find the relative math score data in ‘stu_qqq_SG’ dataset\n\n\nCode\n# eval: false\n# Select the specific columns and view the first few rows\nhead(select(stu_qqq_SG, PV1MATH, PV2MATH, PV3MATH, PV4MATH, PV5MATH, PV6MATH, PV7MATH, PV8MATH, PV9MATH, PV10MATH))\n\n\n# A tibble: 6 × 10\n  PV1MATH PV2MATH PV3MATH PV4MATH PV5MATH PV6MATH PV7MATH PV8MATH PV9MATH\n    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1    639.    601.    621.    632.    579.    592.    601.    587.    618.\n2    697.    754.    672.    657.    621.    656.    748.    694.    743.\n3    694.    654.    697.    646.    678.    644.    721.    671.    694.\n4    427.    410.    424.    389.    331.    380.    399.    422.    375.\n5    436.    453.    392.    440.    443.    453.    397.    460.    438.\n6    570.    540.    532.    534.    466.    529.    514.    521.    472.\n# ℹ 1 more variable: PV10MATH &lt;dbl&gt;\n\n\nSimilarly, we can find the reading and science score data and then get the average value for each course.\n\n\n2.Add new columns for math,reading and science\nCalculate the average score of the three courses separately.\n\n\nCode\nstu_qqq_SG &lt;- stu_qqq_SG %&gt;%\n  mutate(\n    Math = rowMeans(select(., starts_with(\"PV1MATH\"), ends_with(\"PV10MATH\")), na.rm = TRUE),\n    Reading = rowMeans(select(., starts_with(\"PV1READ\"), ends_with(\"PV10READ\")), na.rm = TRUE),\n    Science = rowMeans(select(., starts_with(\"PV1SCIE\"), ends_with(\"PV10SCIE\")), na.rm = TRUE)\n  )\n\n\n\n\n3.Create new clean table for later-on analysis\nSelect relative columns and create new_data with 7 columns and 6606 ids. Then see the total view of the data, where find that there are 47 missing values which can be considered deleted.\n\n\nCode\nnew_data &lt;- select(stu_qqq_SG,CNTSTUID,CNTSCHID,ST004D01T, ESCS, Math, Reading, Science)\nsummary(new_data)\n\n\n    CNTSTUID           CNTSCHID          ST004D01T          ESCS        \n Min.   :70200001   Min.   :70200001   Min.   :1.000   Min.   :-3.5488  \n 1st Qu.:70201836   1st Qu.:70200040   1st Qu.:1.000   1st Qu.:-0.2327  \n Median :70203674   Median :70200081   Median :2.000   Median : 0.4817  \n Mean   :70203673   Mean   :70200082   Mean   :1.508   Mean   : 0.2904  \n 3rd Qu.:70205513   3rd Qu.:70200123   3rd Qu.:2.000   3rd Qu.: 0.9036  \n Max.   :70207345   Max.   :70200165   Max.   :2.000   Max.   : 3.2780  \n                                                       NA's   :47       \n      Math          Reading         Science     \n Min.   :252.1   Min.   :141.2   Min.   :200.1  \n 1st Qu.:505.0   1st Qu.:478.1   1st Qu.:497.4  \n Median :583.0   Median :552.9   Median :569.3  \n Mean   :574.5   Mean   :543.6   Mean   :560.8  \n 3rd Qu.:648.0   3rd Qu.:617.5   3rd Qu.:630.0  \n Max.   :844.1   Max.   :813.8   Max.   :810.2  \n                                                \n\n\nCode\nnew_data &lt;- new_data %&gt;% filter(complete.cases(.))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-analysis",
    "title": "Take-home_Ex01",
    "section": "4.DATA ANALYSIS",
    "text": "4.DATA ANALYSIS\n\n4.1 The distribution of Singapore students’ performance in each course\n\n\nCode\nlong_data &lt;- pivot_longer(new_data, \n                          cols = c(\"Math\", \"Reading\", \"Science\"),\n                          names_to = \"subject\", \n                          values_to = \"score\")\nggplot(long_data, aes(x = subject, y = score, fill = subject)) +\n  geom_boxplot() +  \n  scale_fill_manual(values = c(\"Math\" = \"magenta\", \"Reading\" = \"green\", \"Science\" = \"yellow\")) + # 为不同的科目设置颜色\n  stat_summary(fun = mean, geom = \"point\", shape = 20, size = 3, color = \"red\") +\n  \n  theme_minimal() +\n  labs(title = \"Distribution of Scores in Math, Reading, and Science\",\n       x = \"Subject\",\n       y = \"Average Score\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n⛳\nFrom the plot, we could see that for students performance in three subjects,math is the most highest among three courses, and the next up higher is science. Reading the lowest.\n\n\n4.2 Subject Performance by gender\n\n\nCode\nggplot(long_data, aes(x = subject, y = score, fill = factor(ST004D01T, labels = c(\"Female\", \"Male\")))) +\n  geom_boxplot(position = position_dodge(width = 0.8)) +\n  scale_fill_manual(values = c(\"Female\" = \"pink\", \"Male\" = \"blue\")) +\n  labs(title = \"Performance Distribution by Subject and Gender\",\n       x = \"Subject\",\n       y = \"Score\",\n       fill = \"Gender\") +\n  theme_minimal() +\n  theme(legend.title = element_text(hjust = 0.5),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n⛳\nFrom the boxplot, we could see that male tends to get higher scores in math and science than female. Female tends to perform better in Reading.\n\n\n4.3 Subject Performance by different schools\n⛳\nFrom the plot, we could see that students in school 003 get highest score in math and science. Students in school 062 get the highest score in subject. However, students in school 149 perform the worst in all three courses.\n\n\nCode\n# Calculate the average scores for each school and subject\nschool_averages &lt;- new_data %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Math = mean(Math, na.rm = TRUE),\n    Reading = mean(Reading, na.rm = TRUE),\n    Science = mean(Science, na.rm = TRUE),\n    .groups = 'drop'\n  )\n\n# Reshape the data to a long format for plotting\nschool_averages_long &lt;- school_averages %&gt;%\n  pivot_longer(\n    cols = c(Math, Reading, Science),\n    names_to = \"Subject\",\n    values_to = \"Average_Score\"\n  )\n\n# Find the top and bottom schools for each subject\ntop_schools &lt;- school_averages_long %&gt;%\n  group_by(Subject) %&gt;%\n  slice_max(Average_Score, n = 1) %&gt;%\n  ungroup()\n\nbottom_schools &lt;- school_averages_long %&gt;%\n  group_by(Subject) %&gt;%\n  slice_min(Average_Score, n = 1) %&gt;%\n  ungroup()\n\n# Create the scatter plot\nggplot(school_averages_long, aes(x = Subject, y = Average_Score)) +\n  geom_point(aes(color = CNTSCHID), position = position_jitterdodge()) +\n  labs(title = \"Subject Performance by Different Schools\",\n       x = \"Subject\", \n       y = \"Average Score\") +\n  theme_minimal() +\n  geom_text(data = top_schools, aes(label = CNTSCHID), vjust = 2, color = \"blue\") +\n  geom_text(data = bottom_schools, aes(label = CNTSCHID), vjust = 1, color = \"red\")\n\n\n\n\n\n\n\n4.4 Subject Performance by socioeconomic status\n\n\nCode\ntheme_setting &lt;- theme(\n  plot.title = element_text(size = 9),\n  plot.subtitle = element_text(size = 8),\n  plot.caption = element_text(size = 8),\n  axis.text.x = element_text(angle = 45, hjust = 1) # Adjust for better readability\n)\n\n# Adjust the alpha and size in geom_point for transparency and smaller points\np1 &lt;- ggplot(data=new_data, aes(x= ESCS, y=Math, color = \"Math\")) +\n  geom_point(alpha = 0.5, size = 1.5) +\n  geom_smooth(method=lm, linewidth=0.5) +  \n  coord_cartesian(xlim=c(-3,3), ylim=c(250,850)) +\n  ggtitle(\"Math vs. ESCS\") +  \n  theme_setting +\n  scale_color_manual(values = c(\"Math\" = \"magenta\"))\n\np2 &lt;- ggplot(data=new_data, aes(x= ESCS, y=Reading, color = \"Reading\")) +\n  geom_point(alpha = 0.5, size = 1.5) +\n  geom_smooth(method=lm, linewidth=0.5) +  \n  coord_cartesian(xlim=c(-3,3), ylim=c(250,850)) +\n  ggtitle(\"Reading vs. ESCS\") +\n  theme_setting +\n  scale_color_manual(values = c(\"Reading\" = \"green\"))\n\np3 &lt;- ggplot(data=new_data, aes(x= ESCS, y=Science, color = \"Science\")) +\n  geom_point(alpha = 0.5, size = 1.5) +\n  geom_smooth(method=lm, linewidth=0.5) +  \n  coord_cartesian(xlim=c(-3,3), ylim=c(250,850)) +\n  ggtitle(\"Science vs. ESCS\") +\n  theme_setting +\n  scale_color_manual(values = c(\"Science\" = \"yellow\"))\n\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n⛳\nFrom the plot, we could see that all three subjects—Math, Reading, and Science—show a positive correlation with the Economic, Social, and Cultural Status (ESCS) index. Most of the students are in the middle class."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#conclusion",
    "title": "Take-home_Ex01",
    "section": "5.CONCLUSION",
    "text": "5.CONCLUSION\n\nStudents generally score better in Math compared to Reading. Girls typically excel in Reading but may not perform as well in Science. Boys often do better in Math and Science.\nSchool 003 leads with top scores in Math and Science, which may reflect its excellent programs in these fields. School 062 shines in Reading, hinting at a strong focus on literacy. Meanwhile, school 149 lags in all subjects, which could signal various difficulties at the school.\nHigher socioeconomic status is linked to better grades for students."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "##Loading R packages\nIn this hands-on exercise, two R packages will be used. They are:\nThe code chunk used is as follows:\nCode\npacman::p_load(tidyverse,haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#importing-pisa-data",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\n\nCode\n# eval: false\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\n\n\nCode\n# eval: false\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\n\n\nCode\n# eval: false\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\n\n\nCode\n# eval: false\nstu_qqq_SG &lt;-\n  read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The name and function of the new packages that will be used for this exercise are as follow:\n\nggrepel: an R package provides a way to prevent labels from overlapping in ggplot2 plots.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides another set of visually appealing themes and formatting options for ggplot2.\npatchwork: an R package provides a way to combine multiple ggplot2 plots into a single figure.\n\n\n\nCode\n# eval: false\npacman::p_load(tidyverse, patchwork, \n               ggthemes, hrbrthemes,\n               ggrepel)\n\n\n\n\n\n\n\nCode\n# eval: false\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-the-required-r-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-the-required-r-libraries",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The name and function of the new packages that will be used for this exercise are as follow:\n\nggrepel: an R package provides a way to prevent labels from overlapping in ggplot2 plots.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides another set of visually appealing themes and formatting options for ggplot2.\npatchwork: an R package provides a way to combine multiple ggplot2 plots into a single figure.\n\n\n\nCode\n# eval: false\npacman::p_load(tidyverse, patchwork, \n               ggthemes, hrbrthemes,\n               ggrepel)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#import-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#import-the-data",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "Code\n# eval: false\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel-package",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.1 Working with ggrepel package",
    "text": "2.1 Working with ggrepel package\nggrepel is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\n\n\nCode\n# eval: false\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-themes",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.2 Working with themes",
    "text": "2.2 Working with themes\n8 Built-in themes: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void(). Refer to here\n\n\nCode\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  theme_gray() +\n  ggtitle(\"Ditribution of Maths scores\")\n\n\n\n\n\n\n2.2.1 Working with ggthems package\nIn the example below, The Economist theme is used.\n\n\nCode\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  theme_economist() +\n  ggtitle(\"Ditribution of Maths scores\")\n\n\n\n\n\n\n\n2.2.2 Working with hrbthems package\nhrbrthemesThis focuses more on the typographic elements, labels and fonts.\n\n\nCode\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used.\n\n\nCode\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  theme_ipsum(axis_title_size = 18,          #increase font size of the axis title to 18\n              base_size = 15,                #increase the default axis label to 15\n              grid = \"Y\") +                  #only keep the y-axis grid line -&gt; remove the x-axis grid lines\n  ggtitle(\"Ditribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-patchwork",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-patchwork",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.3 Working with patchwork",
    "text": "2.3 Working with patchwork\nCreating composite plot by combining multiple graphs. Start with creating three statistical graphics below.\n\n\nCode\n#creating histogram\np1 &lt;- ggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Ditribution of Maths scores\")\n\np2 &lt;- ggplot(data = exam_data,\n       aes(x = ENGLISH)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Ditribution of English scores\")\n\n#creating scatterplot\np3 &lt;- ggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\nCreating patchwork.(Refer here for more details)\n\nUse ‘+’ sign to create two columns layout\nUse ‘/’ sign to create two row layout (stack)\nUse ‘()’ sign to create subplot group\nUse ‘|’ sign to place the plots besisde each other\n\nExample 1\n\n\nCode\np1 + p2 / p3\n\n\n\n\n\nExample 2\n\n\nCode\n(p1 / p2) | p3\n\n\n\n\n\nExample 3: It will auto-tag the subplots in text\n\n\nCode\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\nExample 4: Combine patchwork and themes\n\n\nCode\n((p1 / p2) | p3) & theme_economist()\n\n\n\n\n\nExample 5: Insert another plot in a plot using insert_element()\n\n\nCode\np3 + inset_element(p2,\n                   left = 0.02,\n                   bottom = 0.7,\n                   right = 0.5,\n                   top = 1)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\nCode\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\n\nCode\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Code\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for compising multiple plots.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\n\n\n\nCode\npacman::p_load(ggiraph, plotly, gganimate, DT, tidyverse, patchwork, gifski, gapminder, readxl, rPackedBar)\n\n\nImporting the data\n\n\nCode\nexam_data &lt;- read_csv(\"D:/kellyzhaokl/ISSS608-VAA/Hands-on_Ex/Hands-on_Ex02/data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#getting-started",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for compising multiple plots.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\n\n\n\nCode\npacman::p_load(ggiraph, plotly, gganimate, DT, tidyverse, patchwork, gifski, gapminder, readxl, rPackedBar)\n\n\nImporting the data\n\n\nCode\nexam_data &lt;- read_csv(\"D:/kellyzhaokl/ISSS608-VAA/Hands-on_Ex/Hands-on_Ex02/data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#exercises",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#exercises",
    "title": "Hands-on Exercise 3",
    "section": "2. Exercises",
    "text": "2. Exercises\n\n2.1 Using ggiraph for interactive data visualization\nggiraph package\n\nInteractive Arguments of ggiraph\n\nTooltip: displayed when hovering over chart elements\nOnclick: executed when elements are clicked\nData_id: Uses columns as id to show asan sociation of elements\n\n\nIf it is used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides.\n\n2.1.1 Using tooltip (tooltip effect)\nThere are two parts of the codes: 1. creating ggplot object, 2. girafe() of ggiraph will be used to create an interactive svg object.\nInteractivity: By hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n2.1.2 Displaying multiple information on tooltip\nInteractivity: By hovering the mouse pointer on an data point of interest, the student’s ID and Class will be displayed.\n\n\nCode\n#Creating new field called tooltip\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class\", exam_data$CLASS\n))\n\nmy_plot2 &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  \n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),         #refer to the tooltip field above\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = my_plot2,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n2.1.3 Customising tooltip style\nUsing opts_tooltip to customise tooltip rendering by adding css declaration\n\n\nCode\ntooltip_css &lt;- \"background-color:white; font-style:bold; color:red;\"\n\nmy_plot3 &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  \n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = my_plot3,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(\n      css = tooltip_css)\n  )\n)\n\n\n\n\n\n\nNote: Background color is now white and the font color is red and bold\n\n\n2.1.4 Displaying statistics on tooltip\nIn this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip. This is created by creating a function\n\n\nCode\ntooltip_fn &lt;- function(y, ymax, accuracy = .01) {   \n  mean &lt;- scales::number(y, accuracy = accuracy) \n  sem &lt;- scales::number(ymax - y, accuracy = accuracy) \n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)                      \n} \n\ngg_point &lt;- ggplot(data = exam_data,\n            aes(x = RACE)) +\n  \n  stat_summary(\n    aes(y = MATHS, \n        tooltip = after_stat(\n          tooltip_fn(y, ymax))),\n    fun.data = \"mean_se\",\n    geom = GeomInteractiveCol,\n    fill = \"lightblue\"\n    ) +\n  \n  stat_summary(\n    aes(y = MATHS),\n    fun.data = \"mean_se\",\n    geom = \"errorbar\", width = 0.2, linewidth = 0.2\n  )\n\ngirafe(\n  ggobj = gg_point,\n  width_svg = 8,\n  height_svg = 8*0.618,\n  )\n\n\n\n\n\n\n\n\n2.1.5 Using data_id (hover effect)\n\n\nCode\nmy_plot &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = my_plot,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. Note that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n2.1.6 Customising hover effect style\nUsing css declaration to change the highlighting effect\n\n\nCode\nmy_plot2 &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = my_plot2,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: pink;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. Notice opts_hover refers to the selected data and opts_hover_inv refers to the non-selected data. Different from section 2.1.3 above, the css customisation request are encoded directly.\n\n\n2.1.7 Combining tooltip and hover effect\n\n\nCode\nmy_plot_comb &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = my_plot_comb,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(css = \"background-color:white; font-style:bold; color:green;\"),\n    opts_hover(css = \"fill: pink;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n2.1.8 Using onclick (click effect)\nonclick argument of ggiraph provides hotlink interactivity on the web.\n\n\nCode\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\nmy_plot &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n\n  geom_dotplot_interactive(\n    aes(onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = my_plot,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click. Note that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n2.1.9 Coordinated multiple views with ggiraph\nCoordinated multiple views methods is interactive in which when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\nCode\np1 &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n\n  geom_dotplot_interactive(\n    aes(tooltip = ID,\n        data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\np2 &lt;- ggplot(data = exam_data,\n            aes(x = ENGLISH)) +\n\n  geom_dotplot_interactive(\n    aes(tooltip = ID,\n        data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  code = print(p1 / p2),\n  width_svg = 6,\n  height_svg = 6,\n  options = list(\n    opts_hover(css = \"fill: blue;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")    \n  )\n)\n\n\n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\n2.2 Using plotly method for interactive data visualization\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics.\nDifferent from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n2.2.1 Using plot_ly\nCreating basic interactive scatterplot\n\n\nCode\nplot_ly(data = exam_data,\n        x = ~MATHS,\n        y = ~ENGLISH,\n        color = ~RACE)\n\n\n\n\n\n\n\nChanging the default color pallete to ColorBrewel colour palette\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH, \n        color = ~RACE, \n        colors = \"Set1\")\n\n\n\n\n\n\nCustomising the color scheme manually\n\n\nCode\npal &lt;- c(\"red\", \"purple\", \"blue\", \"green\")\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH, \n        color = ~RACE, \n        colors = pal)\n\n\n\n\n\n\nCustomising tooltip\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        text = ~paste(\"Student ID:\", ID,     \n                      \"&lt;br&gt;Class:\", CLASS),  \n        color = ~RACE, \n        colors = \"Set1\")\n\n\n\n\n\n\nWorking with layout. To learn more about layout, visit this link.\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        text = ~paste(\"Student ID:\", ID,     \n                      \"&lt;br&gt;Class:\", CLASS),  \n        color = ~RACE, \n        colors = \"Set1\") |&gt; \n  \n  layout(title = 'English Score versus Maths Score',\n         xaxis = list(range = c(0,100)),\n         yaxis = list(range = c(0,100)))\n\n\n\n\n\n\n\n2.2.2 Using ggplotly\nCreating basic interactive scatterplot. With ggplotly, we can use the original ggplot2 and add ggplotly at the end as extra line\n\n\nCode\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p) \n\n\n\n\n\n\nCreating Multiple Views using highlight_key and subplot of plotly package\n\n\nCode\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data=d, \n              aes(x = MATHS,\n                  y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\n2.3 Using crosstalk method for interactive data visualization\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n2.3.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nCode\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\n\n2.3.2 Linked brushing using crosstalk method\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\nCode\nd &lt;- highlight_key(exam_data)\n\np &lt;- ggplot(data=d, \n              aes(x = MATHS,\n                  y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4 Using gganimate method for creating animation\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\nImport data from the Data worksheet from GlobalPopulation Excel workbook.\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\nBasic ggplot function to create static bubble plot\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  \n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  \n  scale_size(range = c(2, 12)) +\n  \n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\nBuilding animated bubble plot\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  \n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  \n  scale_colour_manual(values = country_colors) +\n  \n  scale_size(range = c(2, 12)) +\n  \n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')            \n\n\n\n\n\n\n\n2.5 Building an animated bubble plot: ggplotly() method\ncreate an animated bubble plot by using ggplotly() method.\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n2.6 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\n\nCode\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "In this Take-home Exercise 2, I have chosen one of my classmate’s Take-home Exercise 1 submission and analyzed the visualization in terms of clarity and aesthetics.\n\n\n\n\nCode\npacman::p_load(tidyverse, haven, knitr, kableExtra, intsvy, ggrepel, patchwork, \n               ggthemes, hrbrthemes, ggdist, ggridges, colorspace, gridExtra)\n\n\n\n\n\nAs we are focursed on Singapore database. So firstly we should filter Singapore dataset. Refer to In-class Exercise 1 for more details.\n\n\nCode\n# eval: false\nstu_qqq_SG &lt;-\n  read_rds(\"D:/kellyzhaokl/ISSS608-VAA/Take-home_Ex/Take-home_Ex01/data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overview",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#overview",
    "title": "Take-home_Ex02",
    "section": "",
    "text": "In this Take-home Exercise 2, I have chosen one of my classmate’s Take-home Exercise 1 submission and analyzed the visualization in terms of clarity and aesthetics.\n\n\n\n\nCode\npacman::p_load(tidyverse, haven, knitr, kableExtra, intsvy, ggrepel, patchwork, \n               ggthemes, hrbrthemes, ggdist, ggridges, colorspace, gridExtra)\n\n\n\n\n\nAs we are focursed on Singapore database. So firstly we should filter Singapore dataset. Refer to In-class Exercise 1 for more details.\n\n\nCode\n# eval: false\nstu_qqq_SG &lt;-\n  read_rds(\"D:/kellyzhaokl/ISSS608-VAA/Take-home_Ex/Take-home_Ex01/data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#dataviz-makeover",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#dataviz-makeover",
    "title": "Take-home_Ex02",
    "section": "2 DataViz Makeover",
    "text": "2 DataViz Makeover\n\n2.1 Distribution of Mean Math/ Reading/Science Scores\n\n2.1.1 Original Version\nFor the original version, three histograms are used to display the distribution of students’ math, reading, and science score.\n\n\nClarityAesthetics\n\n\n\nDistinct Colours: The use of different colors (aquamarine, cornsilk, and darkolivegreen2) for each histogram makes it easy to differentiate between the three subjects.\nClear Titles: Each plot has a clear title that specifies the subject of the scores being displayed, which helps in understanding what each histogram represents.\nLack of Mean Indication: The mean of each distribution is not clearly indicated within the plot area, making it less straightforward for viewers to understand the key point of the data representation.\nOverlapping Axes Labels: The x-axis labels (meanmathscore, meanreadscore, meansciescore) are overlapping with the lower plot, which can make it hard to read.\nConsistent Axis Scales: While the histograms are likely meant to be compared, the y-axis scales differ between the three, which may mislead a viewer regarding the relative frequencies of score ranges.\n\n\n\n\nBorder and Fill Contrast: The black borders around the bars with different fill colors provide a good contrast, making individual bars stand out.\nSpacing Between Plots: The plots are tightly stacked, which may lead to a cluttered look, especially when viewed on smaller screens or from a distance.\n\n\n\n\n\n\n2.1.2 Final Design\nAfter performing necessary modifications, the final code and design are as follows:\n\n\nCode\nmeanmathscore = rowMeans(select(stu_qqq_SG, PV1MATH : PV10MATH))\nstu_qqq_SG$meanmathscore &lt;- meanmathscore\nh1 &lt;- ggplot(data = stu_qqq_SG, aes(x = meanmathscore)) +\n  geom_histogram(bins=20, boundary = 100, color=\"black\", fill=\"aquamarine\") + \n  geom_vline(aes(xintercept = mean(meanmathscore)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = mean(stu_qqq_SG$meanmathscore), y = Inf, label = paste(\"Mean:\", round(mean(stu_qqq_SG$meanmathscore), 2)), \n           vjust = 1, color = \"red\") +\n  coord_cartesian(xlim=c(150,850), ylim = c(0,1000)) +\n  labs(y = \"Count\", x=\"Average Maths Score\", subtitle = \"Maths\") +\n theme_economist()+\n  scale_x_continuous(breaks = seq(0, 850, by = 200)) # Adjust the breaks to include 20 if necessary\n\n\nmeanreadscore = rowMeans(select(stu_qqq_SG, PV1READ : PV10READ))\nstu_qqq_SG$meanreadscore = meanreadscore\nh2 &lt;- ggplot(data = stu_qqq_SG, \n             aes(x = meanreadscore)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"cornsilk\") + \n  geom_vline(aes(xintercept = mean(meanreadscore)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = mean(stu_qqq_SG$meanreadscore), y = Inf, \n           label = paste(\"Mean:\", round(mean(stu_qqq_SG$meanreadscore), 2)), \n           vjust = 1, color = \"red\") +\n  coord_cartesian(xlim=c(150,850)) +\n  theme_economist()+\n  labs(y = \"Count\", x=\"Average Read Score\", subtitle = \"Read\")+\n  coord_cartesian(ylim = c(0,1000))\n\nmeansciescore = rowMeans(select(stu_qqq_SG, PV1SCIE : PV10SCIE))\nstu_qqq_SG$meansciescore = meansciescore\nh3 &lt;- ggplot(data = stu_qqq_SG, \n             aes(x = meansciescore)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"darkolivegreen2\") + \n   geom_vline(aes(xintercept = mean(meansciescore)), color = \"red\", linetype = \"dashed\") +\n  annotate(\"text\", x = mean(stu_qqq_SG$meansciescore), y = Inf, \n           label = paste(\"Mean:\", round(mean(stu_qqq_SG$meansciescore), 2)), \n           vjust = 1, color = \"red\") +\n  coord_cartesian(xlim=c(150,850)) +\n theme_economist()+\n  labs(y = \"Count\", x=\"Average Science Score\", subtitle = \"Science\")+\n  coord_cartesian(ylim = c(0,1000))\n\nh1 + h2 + h3 +\n  plot_annotation(title = \"Distributions of Average of Maths/Read/Science\")\n\n\n\n\n\n\nClarityAesthetics\n\n\n\nComparison Across Subjects: Presenting the three subjects side by side enables a comparative view across different disciplines, which is beneficial for identifying patterns and differences in score distributions.\nOverplotting: There appears to be significant overplotting, with many lines overlapping, making it difficult to distinguish individual distributions.\n\n\n\narrange the histograms horizontally in a single row: By arranging the histograms side by side, viewers can easily compare the distributions of scores in Maths, Reading, and Science.\n\n\n\n\n\n\n2.2 Relationship between Performances with Schools\n\n2.2.1 Original Version\n\n\nClarityAesthetics\n\n\n\nDistinct Colours: The use of different colors (aquamarine, cornsilk, and darkolivegreen2) for each histogram makes it easy to differentiate between the three subjects.\nOverplotting: There is a high degree of overplotting which affects the clarity of the data. The dense overlapping of lines creates visual clutter, making it hard to distinguish between different groups or to identify trends within individual groups.\n\n\n\nAlignment and Layout: Aligning the plots in a horizontal array allows for an easy comparison across the different subjects. This layout is effective for side-by-side analysis without needing to scroll or switch between different visualizations.\n\n\n\n\n\n2.2.2 Final Design\nAfter performing necessary modifications, the final code and design are as follows:\n\n\nCode\nstu_qqq_SG &lt;- stu_qqq_SG %&gt;%\n  mutate(\n    Math = rowMeans(select(., starts_with(\"PV1MATH\"), ends_with(\"PV10MATH\")), na.rm = TRUE),\n    Reading = rowMeans(select(., starts_with(\"PV1READ\"), ends_with(\"PV10READ\")), na.rm = TRUE),\n    Science = rowMeans(select(., starts_with(\"PV1SCIE\"), ends_with(\"PV10SCIE\")), na.rm = TRUE)\n  )\n\nnew_data &lt;- select(stu_qqq_SG,CNTSTUID,CNTSCHID,ST004D01T, ESCS, Math, Reading, Science)\n\n# Calculate the average scores for each school and subject\nschool_averages &lt;- stu_qqq_SG %&gt;%\n  group_by(CNTSCHID) %&gt;%\n  summarize(\n    Math = mean(Math, na.rm = TRUE),\n    Reading = mean(Reading, na.rm = TRUE),\n    Science = mean(Science, na.rm = TRUE),\n    .groups = 'drop'\n  )\n\n# Reshape the data to a long format for plotting\nschool_averages_long &lt;- school_averages %&gt;%\n  pivot_longer(\n    cols = c(Math, Reading, Science),\n    names_to = \"Subject\",\n    values_to = \"Average_Score\"\n  )\n\n# Select the top 2 and bottom 2 schools for each subject\ntop_schools &lt;- school_averages_long %&gt;%\n  group_by(Subject) %&gt;%\n  slice_max(order_by = Average_Score, n = 2) %&gt;%\n  ungroup()\n\nbottom_schools &lt;- school_averages_long %&gt;%\n  group_by(Subject) %&gt;%\n  slice_min(order_by = Average_Score, n = 2) %&gt;%\n  ungroup()\n\n# Create the scatter plot\np &lt;- ggplot(school_averages_long, aes(x = Subject, y = Average_Score)) +\n  geom_point(aes(color = CNTSCHID), position = position_jitterdodge(jitter.width = 0.6)) +\n  labs(title = \"Relationship between Performances with Schools\") +\n  theme_minimal()\n\n# Add labels for the top 2 and bottom 2 schools\np + geom_label_repel(\n      data = top_schools, \n      aes(label = CNTSCHID), \n      nudge_y = 6, # Adjust this value based on your plot's scale\n      direction = \"y\",\n      color = \"blue\",\n      size = 3,\n      segment.size = 0.2,\n      segment.color = \"blue\") +\n    geom_label_repel(\n      data = bottom_schools, \n      aes(label = CNTSCHID), \n      nudge_y = -8, # Adjust this value based on your plot's scale\n      direction = \"y\",\n      color = \"red\",\n      size = 3,\n      segment.size = 0.2,\n      segment.color = \"red\") +\n    theme(legend.position = \"right\") # Remove legend for cleaner plot\n\n\n\n\n\n\nClarityAesthetics\n\n\n\nClean Layout: The plot has a clean and uncluttered layout with a minimalist design that keeps the focus on the data. The background is free of unnecessary elements, which minimizes distractions and allows for the data and labels to stand out clearly.\nTop2 And Bottom 2 Contrast: The use of contrasting colors (red for the bottom schools and blue for the top schools) is aesthetically pleasing and functionally effective. It immediately draws attention to the performance extremes without overwhelming the viewer with too much color differentiation.\n\n\n\nBalanced Color Usage: The restrained use of color for labeling purposes ensures that the plot is not visually overwhelming, maintaining a balance that is pleasing to the eye and enhances readability.\n\n\n\n\n\n\n2.3 Relationship between Performances with Gender\n\n2.3.1 Original Version\n\n\nClarityAesthetics\n\n\nDensity Plots: Using density plots provides a quite clear display about the distribution of the data.\n\n\nColor Harmony: The choice of different colors creates a visually harmonious color scheme that complements the overall design.\n\n\n\n\n\n2.3.2 Final Design\nAfter performing necessary modifications, the final code and design are as follows:\n\n\nCode\nstu_qqq_SG_final &lt;- stu_qqq_SG %&gt;%\n  mutate(GENDER = recode(ST004D01T,\n                         `1` = \"Female\",\n                         `2` = \"Male\"))\n\np1 &lt;- ggplot(data=stu_qqq_SG_final, \n       aes(x = meanmathscore,\n           color=GENDER,\n           fill=GENDER)) +\n  geom_density(linewidth = 0.08, alpha=0.8,color=\"gray\")+\n  scale_fill_manual(values = c(\"#00FFFF\", \"#FFFF99\")) +\n  scale_y_continuous(labels = scales::percent) +\n  scale_x_continuous(limits = c(100, 900)) +\n    theme_minimal() +\n  theme(text = element_text(size = 8), plot.title = element_text(hjust = 0.5))\n\np2 &lt;- ggplot(data=stu_qqq_SG_final, \n       aes(x = meanreadscore,\n           color=GENDER,\n           fill=GENDER)) +\n  geom_density(linewidth = 0.08, alpha=0.8,color=\"gray\")+\n  scale_fill_manual(values = c(\"#00FFFF\", \"#FFFF99\")) +\n  scale_y_continuous(labels = scales::percent) +\n  scale_x_continuous(limits = c(100, 900)) +\n    theme_minimal() +\n  theme(text = element_text(size = 8), plot.title = element_text(hjust = 0.5))\n\np3 &lt;- ggplot(data=stu_qqq_SG_final, \n       aes(x = meansciescore,\n           color=GENDER,\n           fill=GENDER)) +\n  geom_density(linewidth = 0.08, alpha=0.8,color=\"gray\")+\n  scale_fill_manual(values = c(\"#00FFFF\", \"#FFFF99\")) +\n  scale_y_continuous(labels = scales::percent) +\n  scale_x_continuous(limits = c(100, 900)) +\n    theme_minimal() +\n  theme(text = element_text(size = 8), plot.title = element_text(hjust = 0.5))\n(p1/p2/p3)\n\n\n\n\n\n\nClarityAesthetics\n\n\n\nCombining female and male scores on the same plot allows for direct comparison between genders, making it easier to observe differences and similarities in score distributions.\nThe use of different colors for each gender (blue for female and yellow for male) helps in quickly distinguishing between the two groups.\n\n\n\n1.The color scheme is pleasant, with soft shades that make the graph visually appealing and easy to look at for longer periods without causing strain.\n2.The layout is clean and uncluttered, with a clear demarcation between the different plots, which improves readability and overall visual appeal.\n\n\n\n\n\n2.4.1 Original Relationship between Performances with Socio Economic Status\n\n\nClarityAesthetics\n\n\n\nThe inclusion of a line of best fit on each plot provides a clear visual indication of the trend or relationship between socioeconomic status and the mean scores for each subject, which helps in interpreting the data.\nThe current continuous scatter could obscure subtle changes in score distributions within specific socioeconomic strata, which binning could help to highlight.\n\n\n\nColor Harmony: The choice of different colors creates a visually harmonious color scheme that complements the overall design.\n\n\n\n\n\n2.4.2 Final Design\nAfter performing necessary modifications, the final code and design are as follows:\n\n\nCode\n# Filter out rows with NA values in ESCS\nnew_data &lt;- new_data[!is.na(new_data$ESCS),]\n\nlong_data &lt;- pivot_longer(new_data, \n                          cols = c(\"Math\", \"Reading\", \"Science\"),\n                          names_to = \"subject\", \n                          values_to = \"score\")\n# Convert ESCS column to numeric\nlong_data$ESCS &lt;- as.numeric(long_data$ESCS)\n\n# Define breaks and labels\nbreaks &lt;- c(-4, -2, 0, 2, 4)\nlabels &lt;- c(\"Low\", \"Low Medium\", \"Medium\", \"Top\")\n\n# Use cut with the numeric ESCS column\nbins &lt;- cut(long_data$ESCS, breaks = breaks, labels = labels, include.lowest = TRUE)\n\nlong_data &lt;- long_data %&gt;%\n  mutate(ESCS = bins)\n\nggplot(long_data, \n       aes(y = score, x = ESCS, fill = ESCS)) +\n  geom_boxplot() +\n  scale_fill_viridis_d() +  # Use viridis color palette\n  facet_wrap(~ subject) +\n  labs(y = \"Score\", \n       title = \"Relationship between Performances with Socio Economic Status\") +\n  theme_minimal() +\n  theme(text = element_text(size = 10),  # Adjust text size\n        plot.title = element_text(hjust = 0.5),\n        axis.title.x = element_blank(),  # Remove x-axis title\n        axis.text.x = element_text(size = 8, angle = 90, vjust = 1)) +  # Adjust the x-axis label size, angle, and vertical adjustment\n  theme(legend.position = \"none\")\n\n\n\n\n\n\nClarityAesthetics\n\n\n\nBinning the socio-economic status into clear categories (‘Low’, ‘Low Medium’, ‘Medium’, ‘Top’) simplifies the interpretation of the data by reducing complexity and allowing for easy comparison between distinct socio-economic groups.\nThe boxplot representation provides a concise summary of the distribution of scores within each socio-economic category, highlighting median values and variability, which makes it easier to discern the central tendency and spread of scores.\n\n\n\n\nThe use of color coding for different socio-economic categories in the boxplot enhances visual differentiation, making it easier for viewers to quickly associate each box with its corresponding socio-economic level.\nThe consistent layout across the three subjects (Math, Reading, Science) and the alignment of categories across the facets maintain a uniform look, which is pleasing to the eye and aids in comparing across subjects without the distraction of differing formats or scales."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#learning-point",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#learning-point",
    "title": "Take-home_Ex02",
    "section": "3 Learning Point",
    "text": "3 Learning Point\nBy reviewing my classmates’ work, I’ve learned the importance of variety in data visualization.\nFor instance, I’ve observed that complex numerical data can become more accessible when first categorized and then depicted using an appropriate plot type. This step of classification allows for a cleaner and more organized presentation, making it easier for the audience to digest the information.\nFurthermore, I’ve realized that the impact of a visualization is often in the details. The same chart can be transformed from a simple illustration to a compelling narrative with the strategic use of colors, adjusted titles, and the inclusion of helpful annotations like auxiliary lines. These seemingly minor tweaks can significantly enhance the visualization’s ability to engage and inform.\nThis peer-learning approach has not only expanded my toolkit of design strategies but also encouraged a deeper appreciation for the creative process behind effective data communication."
  }
]